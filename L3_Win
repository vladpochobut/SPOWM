#include<stdio.h>
#include<windows.h>
#include<conio.h>
#include<time.h>
#include<iostream>
#include<string>

using namespace std;

void Server(char* path);
void Client();



int main(int argc, char* argv[])
{
	switch(argc)
	{
	case 1:
		Server(argv[0]);		
		break;

	default:
		Client();		
		break;
	}
}



void Server(char* path)
{
	STARTUPINFO si;
	ZeroMemory( &si, sizeof(si) );
	si.cb = sizeof(si);

	PROCESS_INFORMATION childProcessInfo;
	ZeroMemory(&childProcessInfo, sizeof(childProcessInfo));

	HANDLE hMyPipe;
	HANDLE Semaphores[3];	

	char buffer[20];				 // Буфер для передачи
	int bufferSize = sizeof(buffer); // Размер буфера

	string message;


	Semaphores[0] = CreateSemaphore(NULL, 0 , 1, "SEMAPHORE_lab3");      // Семафор, уведомляющий о разрешении печати
	Semaphores[1] = CreateSemaphore(NULL, 0 , 1, "SEMAPHORE_end_lab3");      // Семафор, уведомляющий о разрешении печати
	Semaphores[2] = CreateSemaphore(NULL, 0 , 1, "SEMAPHORE_EXIT_lab3");	// Семафор, уведомляющий о завершении работы			

	cout<<"Server process\n\n";

	hMyPipe = CreateNamedPipe("\\\\.\\pipe\\MyPipe",PIPE_ACCESS_OUTBOUND,PIPE_TYPE_MESSAGE|PIPE_WAIT,PIPE_UNLIMITED_INSTANCES ,0,0,INFINITE,(LPSECURITY_ATTRIBUTES)NULL);

	CreateProcess(path, " 2", NULL, NULL, FALSE, CREATE_NEW_CONSOLE, NULL, NULL, &si, &childProcessInfo);

	if(!ConnectNamedPipe(hMyPipe,(LPOVERLAPPED)NULL))
		cout<<"Connection failure\n";

	while(1)
	{				
		DWORD NumberOfBytesWritten;

		cout << "\nEnter message:\n";
		cin.clear();
		getline(cin, message);


		if(message == "quit")
		{
			ReleaseSemaphore(Semaphores[2], 1, NULL);  // Сообщаем дочернему процессу о завершении работы
			WaitForSingleObject(childProcessInfo.hProcess, INFINITE);
			break;
		}

		ReleaseSemaphore(Semaphores[0], 1, NULL);   // Сообщаем дочернему процессу о готовности начала передачи данных

		cout << "w1\n";
		int NumberOfBlocks = message.size() / bufferSize + 1;	// Количество блоков размером с буфер			
		WriteFile(hMyPipe, &NumberOfBlocks, sizeof(NumberOfBlocks), &NumberOfBytesWritten, (LPOVERLAPPED)NULL);

		cout << "w2\n";
		int size = message.size();
		WriteFile(hMyPipe, &size, sizeof(size), &NumberOfBytesWritten, (LPOVERLAPPED)NULL);

		cout << "w_blocks\n";
		for(int i = 0; i < NumberOfBlocks; i++)
		{					
			message.copy(buffer, bufferSize, i*bufferSize);		// Заполняем буфер
			if(!WriteFile(hMyPipe, buffer, bufferSize, &NumberOfBytesWritten,(LPOVERLAPPED)NULL)) cout<<"Write Error\n";
		}				

		WaitForSingleObject(Semaphores[1], INFINITE); // Ожидание, пока клиентский процесс не напечатал строку
	}			

	CloseHandle(hMyPipe);
	CloseHandle(Semaphores[0]);
	CloseHandle(Semaphores[1]);
	cout << "\n\n";
	system("pause");
	return;
}

void Client()
{
	HANDLE hMyPipe;
	HANDLE Semaphores[3];	

	char buffer[20];				 // Буфер для передачи
	int bufferSize = sizeof(buffer); // Размер буфера

	string message;

	bool successFlag;
	Semaphores[0] = OpenSemaphore(SEMAPHORE_ALL_ACCESS, TRUE, "SEMAPHORE_lab3");
	Semaphores[1] = OpenSemaphore(SEMAPHORE_ALL_ACCESS, TRUE, "SEMAPHORE_end_lab3");
	Semaphores[2] =  OpenSemaphore(SEMAPHORE_ALL_ACCESS, TRUE, "SEMAPHORE_EXIT_lab3");

	cout<<"Child process\n\n";

	hMyPipe = CreateFile("\\\\.\\pipe\\MyPipe",GENERIC_READ,FILE_SHARE_WRITE,NULL,OPEN_EXISTING,0,NULL);


	while(1)
	{				
		successFlag = TRUE;
		DWORD NumberOfBytesRead;
		message.clear();

		int index = WaitForMultipleObjects(3, Semaphores, FALSE, INFINITE) - WAIT_OBJECT_0; // Получил уведомление о возможности чтения, семафор занят
		if (index == 2) // Если сигнальный семафор выхода
			break;					

		//				cout<<"\n\t\t\tServer is ready to send message\n";

		int NumberOfBlocks;
		if(!ReadFile(hMyPipe, &NumberOfBlocks, sizeof(NumberOfBlocks), &NumberOfBytesRead, NULL)) break;

		int size;
		if(!ReadFile(hMyPipe, &size, sizeof(size), &NumberOfBytesRead, NULL)) break;

		for( int i=0; i < NumberOfBlocks; i++)
		{
			successFlag = ReadFile(hMyPipe, buffer, bufferSize, &NumberOfBytesRead, NULL);
			if(!successFlag) break;

			message.append(buffer, bufferSize); // Добавляем полученный буфер в строку
		}
		if(!successFlag) break;

		message.resize(size);

	//	cout << message << "\n\n";
		for(int i =0; i < size; i++)
		{
			cout << message[i];
			Sleep(100);
		}
		cout<<endl;
		//				cout<<"\n\t\t\tMessage was printed successfully\n";

		ReleaseSemaphore(Semaphores[1], 1, NULL);		// Уведомление родительского процесса об успешном получении строки
//		Sleep(6000);
	}
	CloseHandle(hMyPipe);
	CloseHandle(Semaphores[0]);
	CloseHandle(Semaphores[1]);
	return;
}
